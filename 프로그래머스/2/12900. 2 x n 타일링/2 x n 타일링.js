/*
2 x 1인 직사각형 타일을 이용해 n * 2인 바닥을 채우는 경우의 수를 반환.

모든 경우의 수를 구하는 것이므로 DFS를 통해 구현하면 된다.
길이가 n인 바닥에는 n개의 직사각형으로 이루어짐.

세로 형태의 박스, 가로 형태의 박스 2가지 경우로 카운팅.
길이가 홀수인 경우에는 세로 : 홀수, 가로 : 짝수여야 하고,
길이가 짝수인 경우에는 세로 : 짝수, 가로 : 짝수여야 한다.
총 상자의 개수는 n개.

dfs로 구현
dfs[width, height]를 인수로 넣어줌.
두가지 경우로 가로,세로를 따로 1씩 더해주는 경우를 만들어준다.
가로 + 세로의 합이 n개이고 조건을 만족하면 count
0,1,2,3,4,5
0,0,2,3,5,9
다음이 짝수면 피보나치, 홀수면 추가로 1 더해줌
*/

function solution(n) {
    let fib = [0, 0, 2, 3]
    for(let i = 4; i <= n; i ++) {
            fib[i] = (fib[i-1] + fib[i-2]) % 1000000007
    }
    return fib[n]
}